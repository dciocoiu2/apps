services:
  traefik:
    image: traefik:v2.10
    command:
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--providers.docker=true"
      - "--api.dashboard=true"
      - "--log.level=INFO"
      - "--certificatesresolvers.selfsigned.acme.tlschallenge=true"
      - "--certificatesresolvers.selfsigned.acme.email=demo@example.com"
      - "--certificatesresolvers.selfsigned.acme.storage=/acme.json"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    networks:
      - labnet
    volumes:
      - acme:/acme.json
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.demo.rule=Host(`demo.localhost`)"
      - "traefik.http.routers.demo.entrypoints=web"
      - "traefik.http.routers.demo-secure.rule=Host(`demo.localhost`)"
      - "traefik.http.routers.demo-secure.entrypoints=websecure"
      - "traefik.http.routers.demo-secure.tls.certresolver=selfsigned"
      - "traefik.http.services.demo.loadbalancer.server.port=5000"
    restart: unless-stopped

  haproxy:
    image: haproxy:2.9
    ports:
      - "9000:9000"
    networks:
      - labnet
    configs:
      - source: haproxy_cfg
        target: /usr/local/etc/haproxy/haproxy.cfg
    restart: unless-stopped

  demo-api:
    build:
      context: .
      dockerfile: inline.Dockerfile.demoapi
    configs:
      - source: demoapi_py
        target: /app/demoapi.py
    networks:
      - labnet
    restart: unless-stopped

  locust:
    image: locustio/locust
    ports:
      - "8089:8089"
    configs:
      - source: locustfile
        target: /mnt/locust/locustfile.py
    command: -f /mnt/locust/locustfile.py --host=http://demo-api:5000
    networks:
      - labnet
    restart: unless-stopped

  prometheus:
    image: prom/prometheus
    ports:
      - "9090:9090"
    configs:
      - source: prometheus_cfg
        target: /etc/prometheus/prometheus.yml
    networks:
      - labnet
    restart: unless-stopped

  grafana:
    image: grafana/grafana-oss
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    configs:
      - source: grafana_datasource
        target: /etc/grafana/provisioning/datasources/prometheus.yml
      - source: grafana_dashboard
        target: /etc/grafana/provisioning/dashboards/demo-dashboard.yml
      - source: grafana_dashboard_json
        target: /etc/grafana/provisioning/dashboards/demo.json
    networks:
      - labnet
    restart: unless-stopped

  netem:
    image: alpine
    command: sh -c "apk add --no-cache iproute2 && tc qdisc add dev eth0 root netem loss 10%"
    entrypoint: []
    networks:
      - labnet
    restart: unless-stopped

  mtr:
    image: alpine
    command: sh -c "apk add --no-cache mtr && mtr -rw demo-api"
    entrypoint: []
    networks:
      - labnet
    restart: "no"

configs:
  haproxy_cfg:
    inline: |
      global
        log stdout format raw local0
      defaults
        mode tcp
        timeout connect 5s
        timeout client 30s
        timeout server 30s
      frontend ft_demo
        bind *:9000
        default_backend bk_demo
      backend bk_demo
        server demo-api demo-api:5000

  prometheus_cfg:
    inline: |
      global:
        scrape_interval: 5s
      scrape_configs:
        - job_name: 'demo-api'
          static_configs:
            - targets: ['demo-api:5000']

  grafana_datasource:
    inline: |
      apiVersion: 1
      datasources:
        - name: Prometheus
          type: prometheus
          access: proxy
          url: http://prometheus:9090
          isDefault: true

  grafana_dashboard:
    inline: |
      apiVersion: 1
      providers:
        - name: 'default'
          orgId: 1
          folder: ''
          type: file
          disableDeletion: false
          updateIntervalSeconds: 10
          options:
            path: /etc/grafana/provisioning/dashboards

  grafana_dashboard_json:
    inline: |
      {
        "id": null,
        "title": "Demo API Metrics",
        "panels": [
          {
            "type": "graph",
            "title": "Request Rate",
            "targets": [
              {
                "expr": "flask_http_request_total",
                "legendFormat": "requests",
                "refId": "A"
              }
            ],
            "gridPos": { "x": 0, "y": 0, "w": 24, "h": 8 }
          }
        ],
        "schemaVersion": 16,
        "version": 1
      }

  locustfile:
    inline: |
      from locust import HttpUser, task, between

      class DemoUser(HttpUser):
          wait_time = between(1, 3)

          @task
          def hit_root(self):
              self.client.get("/")

          @task
          def check_health(self):
              self.client.get("/health")

  demoapi_py:
    inline: |
      from flask import Flask, jsonify
      from prometheus_flask_exporter import PrometheusMetrics
      import time, random

      app = Flask(__name__)
      metrics = PrometheusMetrics(app)

      @app.route("/")
      def index():
          time.sleep(random.uniform(0.1, 0.5))  # Simulated latency
          return jsonify(message="Hello from the demo API!")

      @app.route("/health")
      def health():
          return jsonify(status="ok")

      if __name__ == "__main__":
          app.run(host="0.0.0.0", port=5000)

x-bake:
  files:
    inline.Dockerfile.demoapi: |
      FROM python:3.11-slim
      WORKDIR /app
      COPY demoapi.py .
      RUN pip install flask prometheus_flask_exporter
      CMD ["python", "demoapi.py"]

volumes:
  acme:

networks:
  labnet:
    driver: bridge