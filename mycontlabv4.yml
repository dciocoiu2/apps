services:
  welcome:
    image: nginx:alpine
    ports:
      - "3000:80"
    command: >
      sh -lc "set -e;
      mkdir -p /usr/share/nginx/html;
      printf '%s\n'
      '<!DOCTYPE html>'
      '<html>'
      '<head><title>Welcome to Kubernetes Lab</title></head>'
      '<body style=\"font-family:sans-serif;\">'
      '<h1>Kubernetes Lab Ready</h1>'
      '<ul>'
      '<li><a href=\"http://localhost:9001\">Portainer</a></li>'
      '<li><a href=\"http://localhost:8080\">Helm Dashboard</a></li>'
      '<li><a href=\"http://localhost:8081\">Swagger YAML Editor</a></li>'
      '<li><a href=\"https://localhost:8443\">Code IDE</a></li>'
      '<li><a href=\"http://localhost:8888\">Dozzle Logs</a></li>'
      '<li><a href=\"http://localhost:9091\">Kubebox</a></li>'
      '<li><a href=\"http://localhost:8082\">GitLab Source</a></li>'
      '<li><a href=\"http://localhost:8083\">GitLab Deploy</a></li>'
      '<li><a href=\"http://localhost:8200\">Vault</a></li>'
      '<li><a href=\"http://localhost:5000\">Registry</a></li>'
      '<li><a href=\"http://localhost:8084\">Jenkins</a></li>'
      '<li><a href=\"http://localhost:9090\">Prometheus</a></li>'
      '<li><a href=\"http://localhost:3001\">Grafana</a></li>'
      '</ul>'
      '</body>'
      '</html>' > /usr/share/nginx/html/index.html;
      exec nginx -g 'daemon off;'"
    networks:
      - labnet

  registry:
    image: registry:2
    ports:
      - "5000:5000"
    networks:
      - labnet

  portainer:
    image: portainer/portainer-ce
    ports:
      - "9001:9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    networks:
      - labnet

  dozzle:
    image: amir20/dozzle
    ports:
      - "8888:8888"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - labnet

  helm-dashboard:
    image: komodorio/helm-dashboard:latest
    ports:
      - "8080:8080"
    networks:
      - labnet

  swagger-editor:
    image: swaggerapi/swagger-editor
    ports:
      - "8081:8080"
    networks:
      - labnet

  code-server:
    image: codercom/code-server:latest
    ports:
      - "8443:8443"
    environment:
      - PASSWORD=none
    command:
      - "--bind-addr"
      - "0.0.0.0:8443"
    networks:
      - labnet

  kubebox:
    image: astefanutti/kubebox:latest
    ports:
      - "9091:8080"
    networks:
      - labnet

  gitlab-source:
    image: gitlab/gitlab-ce:latest
    container_name: gitlab-source
    ports:
      - "8082:80"
    volumes:
      - gitlab_source_data:/var/opt/gitlab
    environment:
      GITLAB_OMNIBUS_CONFIG: |
        external_url 'http://localhost:8082';
        gitlab_rails['registry_enabled'] = true;
    networks:
      - labnet

  gitlab-deploy:
    image: gitlab/gitlab-ce:latest
    container_name: gitlab-deploy
    ports:
      - "8083:80"
    volumes:
      - gitlab_deploy_data:/var/opt/gitlab
    environment:
      GITLAB_OMNIBUS_CONFIG: |
        external_url 'http://localhost:8083';
        gitlab_rails['registry_enabled'] = false;
    networks:
      - labnet

  vault:
    image: hashicorp/vault
    ports:
      - "8200:8200"
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: root
      VAULT_DEV_LISTEN_ADDRESS: 0.0.0.0:8200
    volumes:
      - vault_data:/vault/file
    networks:
      - labnet

  jenkins-seed:
    image: alpine:3.20
    volumes:
      - jenkins_data:/var/jenkins_home
    command: >
      sh -lc "set -e;
      mkdir -p /var/jenkins_home/jobs/sample-job;
      printf '%s\n'
      '<?xml version=\"1.0\" encoding=\"UTF-8\"?>'
      '<project>'
      '  <description>Sample GitLab-triggered pipeline</description>'
      '  <scm class=\"hudson.plugins.git.GitSCM\">'
      '    <configVersion>2</configVersion>'
      '    <userRemoteConfigs>'
      '      <hudson.plugins.git.UserRemoteConfig>'
      '        <url>http://gitlab-source/root/sample-repo.git</url>'
      '      </hudson.plugins.git.UserRemoteConfig>'
      '    </userRemoteConfigs>'
      '    <branches>'
      '      <hudson.plugins.git.BranchSpec>'
      '        <name>*/main</name>'
      '      </hudson.plugins.git.BranchSpec>'
      '    </branches>'
      '  </scm>'
      '  <builders>'
      '    <hudson.tasks.Shell>'
      '      <command>echo Building from GitLab source...</command>'
      '    </hudson.tasks.Shell>'
      '  </builders>'
      '</project>' > /var/jenkins_home/jobs/sample-job/config.xml;
      chown -R 1000:1000 /var/jenkins_home"
    networks:
      - labnet
    restart: "no"

  jenkins:
    image: jenkins/jenkins:lts-jdk17
    ports:
      - "8084:8080"
    volumes:
      - jenkins_data:/var/jenkins_home
    environment:
      - JAVA_OPTS=-Djenkins.install.runSetupWizard=false
    depends_on:
      - jenkins-seed
      - gitlab-source
    networks:
      - labnet

  prometheus:
    image: prom/prometheus
    ports:
      - "9090:9090"
    volumes:
      - prometheus_data:/prometheus
    entrypoint: >
      sh -lc "set -e;
      mkdir -p /etc/prometheus;
      printf '%s\n'
      'global:'
      '  scrape_interval: 15s'
      '  evaluation_interval: 15s'
      ''
      'scrape_configs:'
      '  - job_name: prometheus'
      '    static_configs:'
      '      - targets: ['\''localhost:9090'\'']'
      ''
      '  - job_name: jenkins'
      '    metrics_path: /prometheus'
      '    static_configs:'
      '      - targets: ['\''jenkins:8080'\'']'
      > /etc/prometheus/prometheus.yml;
      exec /bin/prometheus --config.file=/etc/prometheus/prometheus.yml --storage.tsdb.path=/prometheus"
    networks:
      - labnet

  grafana:
    image: grafana/grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - labnet
    entrypoint: >
      sh -lc "set -e;
      mkdir -p /etc/grafana/provisioning/datasources /etc/grafana/provisioning/dashboards /var/lib/grafana/dashboards;
      printf '%s\n'
      'apiVersion: 1'
      'datasources:'
      '  - name: Prometheus'
      '    type: prometheus'
      '    access: proxy'
      '    url: http://prometheus:9090'
      '    isDefault: true'
      > /etc/grafana/provisioning/datasources/prometheus.yml;
      printf '%s\n'
      'apiVersion: 1'
      'providers:'
      '  - name: Default'
      '    orgId: 1'
      '    folder: ""'
      '    type: file'
      '    disableDeletion: false'
      '    editable: true'
      '    options:'
      '      path: /var/lib/grafana/dashboards'
      > /etc/grafana/provisioning/dashboards/dashboard.yml;
      exec grafana-server"

volumes:
  portainer_data:
  gitlab_source_data:
  gitlab_deploy_data:
  vault_data:
  jenkins_data:
  prometheus_data:
  grafana_data:

networks:
  labnet:
    driver: bridge